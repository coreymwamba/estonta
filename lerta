#! /bin/bash
# lerta - appointment listing script
# Corey Mwamba, 2016
source $HOME/.config/estonta.conf
# better parsing of the iCal file thanks to http://stackoverflow.com/a/8574392
containsElement(){
  local e
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
      return 1
      }
generate_fields(){
        icalarray=("DTSTART" "DTEND" "SUMMARY" "LOCATION" "DESCRIPTION" "CATEGORIES")
        while read line
        do
                IFS=':' read -r calname string <<< "$line"
                containsElement "${calname}" "${icalarray[@]}"
                [[ $? == 0 ]] && printf -v $calname "$string";
        done < $LERTA
        #iCalendar date format -> something that `date` can read. Sure there is an easier way, but I don't know it
        DTSTART=$(echo ${DTSTART%Z} | sed -e 's/.\{4\}/&-/'|sed -e 's/.\{7\}/&-/'|sed -e 's/.\{13\}/&:/'|sed -e 's/$
        THEDATE=$(date -d $DTSTART +"$DATEFORMAT")
}

find_appointments(){
	[[ ! -z "$(ls -A $eventpath)" ]] || { echo "No events found"; exit 1; }
needle="$(date -d "$DATEFILE" -Idate)"
for found in $(grep -lr --include '*.ics' $needle $eventpath);
do
list_appointment
done
}

date_range(){
	# SO - http://stackoverflow.com/questions/28226229/bash-looping-through-dates
startdate=$(date -I -d "$startdate") ||  exit -1 
enddate=$(date -I -d "$enddate")   || exit -1 
DATEFILE="$startdate"
while [ "$(date -d "$DATEFILE" +%Y%m%d)" -lt "$(date -d "$enddate" +%Y%m%d)" ]; 
	do
	short="1"
find_appointments
  DATEFILE=$(date -I -d "$DATEFILE + 1 day")
done
}

list_appointment(){
		[[ ! -z "$(ls -A $eventpath)" ]] || { echo "No events found"; exit 1; }
	tail -n +5 $found > $LERTA
generate_fields
		echo -e "$THEDATE - $SUMMARY"
[[ -z "$SHORTNESS" ]] && echo -e "$LOCATION"
		fulltext=${DESCRIPTION//\n\n/\\n\\n}
		fulltext=${fulltext//(\\n)/\\n\\n}
[[ -z "$SHORTNESS" ]] && echo -e ${fulltext%\n}
}

list_all(){
	[[ ! -z "$(ls -A $eventpath)" ]] || { echo "No events found"; exit 1; }
for file in $eventpath/*.ics;
do
	tail -n +5 $file > $LERTA
generate_fields
	echo "$(date -d $DTSTART +"$DATEFORMAT") - $SUMMARY"
done
}

list_by_cat(){
		[[ ! -z "$(ls -A $eventpath)" ]] || { echo "No events found"; exit 1; }
for file in $eventpath/*.ics;
do
	tail -n +5 $file > $LERTA
generate_fields
	if [ $CATEGORIES == $FILTER ];
	then
		echo "$(date -d $DTSTART +"$DATEFORMAT") - $SUMMARY";
	fi
done	
	
}

show_help() {
cat <<'HelpText123'
lerta: list events. 
	no switches		List all saved events; 
				OR (if run for first time) create directory to save events. 
				Edit ~/.config/estonta.conf
				to change the directory.
	
	-c --category=TEXT	List all saved events filtered by category.
	
	-d,--date=DATE_STRING	Find events matching the date string.
				DATE_STRING is a any value accepted by	
				date(1) function.
				
	-r START_DATE_STRING END_DATE_STRING	Find events within a date range.
	
	-h,-?,--help	Show this help.
HelpText123
}


case $1 in
-h|-\?|--help)
show_help
exit 0
;;

-c)
if [ -n "$2" ];
	then
		FILTER=$2
		shift
		list_by_cat
		exit 0
	else
		printf 'ERROR: you need to enter a category.\n' >&2
		exit 1
fi
;;
--category=?*)
FILTER=${1#*=}
if [ -n $FILTER ]; 
	then
		list_by_cat
		exit 0
	else
		printf 'ERROR:  you need to enter a category.\n' >&2
		exit 1
fi
;;
-d)
if [ -n "$2" ];
	then
		DATEFILE=$2
		shift
		find_appointments
		exit 0
	else
		printf 'ERROR: you need to enter a date string.\n' >&2
		exit 1
fi
;;

--date=?*)
DATEFILE=${1#*=}
if [ -n $DATEFILE ]; 
	then
		find_appointments
		exit 0
	else
		printf 'ERROR: you need to enter a date string.\n' >&2
		exit 1
fi
;;

-r)
shift
startdate=$1
enddate=$2
date_range
exit 0
;;

*)
if [[ ! -s $eventpath ]]; then
mkdir -p $eventpath
echo "New directory created at $eventpath."
fi
list_all
exit 0
;;
esac
rm $LERTA
